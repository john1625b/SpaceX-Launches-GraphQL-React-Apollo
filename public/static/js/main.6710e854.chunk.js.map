{"version":3,"sources":["SpaceX-logo.png","compoments/LaunchItem.js","compoments/MissionKey.js","compoments/Launches.js","compoments/Launch.js","App.js","reportWebVitals.js","index.js"],"names":["LaunchItem","launch","flight_number","mission_name","launch_date_local","launch_success","className","classNames","format","to","MissionKey","LAUNCHES_QUERY","gql","Launches","query","loading","error","data","console","log","launches","map","Component","LAUNCH_QUERY","Launch","this","props","match","params","parseInt","variables","launch_year","rocket","rocket_id","rocket_name","rocket_type","client","ApolloClient","uri","App","src","logo","alt","style","width","display","margin","exact","path","component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6710e854.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/SpaceX-logo.00b880fb.png\";","import React from 'react';\nimport classNames from \"classnames\";\nimport Moment from 'react-moment';\nimport { Link } from 'react-router-dom'\n\nexport default function LaunchItem({launch: { flight_number, mission_name, launch_date_local,launch_success}}) {\n    return (\n        <div className=\"card card-body mb-3\">\n            <div className=\"row\">\n                <div className=\"col-md-9\">\n                    <h4>Mission:\n                        <span className={classNames({\n                            'text-success': launch_success,\n                            'text-danger': !launch_success\n                        })}> {mission_name}\n                        </span>\n                    </h4>\n                    <p>Date <Moment format=\"YYYY-MM-DD HH:mm\">{launch_date_local}</Moment></p>\n                </div>\n                <div className=\"col-md-3\">\n                    <Link to={`/launch/${flight_number}`} className=\"btn btn-secondary\">Launch Details</Link>\n                </div>\n            </div>\n        </div>\n    );\n}\n","import React from 'react';\n\nconst MissionKey = () => {\n    return (\n        <div className=\"my-3\">\n            <p>\n                <span className=\"px-3 mr-2 bg-success\"/> = Success\n            </p>\n            <p>\n                <span className=\"px-3 mr-2 bg-danger\"/> = Fail\n            </p>\n        </div>\n    );\n};\n\nexport default MissionKey;","import React, {Component, Fragment} from 'react';\nimport gql from 'graphql-tag';\nimport { Query } from 'react-apollo';\nimport LaunchItem from \"./LaunchItem\";\nimport MissionKey from \"./MissionKey\";\n\nconst LAUNCHES_QUERY = gql`\n    query LaunchesQuery {\n        launches {\n            flight_number\n            mission_name\n            launch_date_local\n            launch_success\n        }\n    }\n`;\n\nclass Launches extends Component {\n    render() {\n        return (\n            <Fragment>\n                <h1 className=\"display-4 my-3\">Launches</h1>\n                <MissionKey/>\n                <Query query={LAUNCHES_QUERY}>\n                    {\n                        ({loading, error, data}) => {\n                            if (loading) return <h4>Loading...</h4>;\n                            if (error) {\n                                console.log(error);\n                                return <div>Encountered Error</div>\n                            } else {\n                                return (\n                                    <Fragment>\n                                        {\n                                            data.launches.map(launch => (\n                                                <LaunchItem key={launch.flight_number} launch={launch} />\n                                            ))\n                                        }\n                                    </Fragment>\n                                )\n                            }\n                        }\n                    }\n                </Query>\n            </Fragment>\n        );\n    }\n}\n\nexport default Launches;","import React, {Component, Fragment} from 'react';\nimport gql from 'graphql-tag'\nimport { Query } from 'react-apollo';\nimport classNames from \"classnames\";\nimport {Link} from \"react-router-dom\";\n\nconst LAUNCH_QUERY = gql`\n    query LaunchQuery($flight_number: Int!) {\n        launch(flight_number: $flight_number) {\n            mission_name\n            flight_number\n            launch_year\n            launch_success\n            rocket {\n                rocket_id\n                rocket_name\n                rocket_type\n            }\n        }\n    }\n`;\n\nclass Launch extends Component {\n    render() {\n        let {flight_number} = this.props.match.params;\n        flight_number = parseInt(flight_number);\n        return (\n            <Fragment>\n                <Query query={LAUNCH_QUERY} variables={{flight_number}}>\n                    {\n                        ({loading, error, data}) => {\n                            if (loading) return <h4>Loading...</h4>;\n                            if (error) {\n                                console.log(error);\n                                return (<div>Encountered Error</div>)\n                            } else {\n                                console.log(data);\n                                const {mission_name, flight_number, launch_year, launch_success,\n                                    rocket: {rocket_id, rocket_name, rocket_type}\n                                } = data.launch;\n                                return (\n                                    <div>\n                                        <h1 className=\"display-4 my-3\">\n                                            <span className=\"text-dark\">Mission: </span>\n                                            {mission_name}\n                                        </h1>\n                                        <h4 className=\"my-3\">Launch Details</h4>\n                                        <ul className=\"list-group\">\n                                            <li className=\"list-group-item\">Flight Number: {flight_number}</li>\n                                            <li className=\"list-group-item\">Launch Year: {launch_year}</li>\n                                            <li className=\"list-group-item\">\n                                                Launch Successful:\n                                                <span className={classNames({\n                                                    'text-success': launch_success,\n                                                    'text-danger': !launch_success,\n                                                })}>\n                                                    {launch_success ?\n                                                        ' Yes' :\n                                                        ' No'\n                                                    }\n                                                </span>\n                                            </li>\n                                        </ul>\n                                        <h4 className=\"my-3\">Rocket Details</h4>\n                                        <li className=\"list-group-item\">Rocket ID: {rocket_id}</li>\n                                        <li className=\"list-group-item\">Rocket Name: {rocket_name}</li>\n                                        <li className=\"list-group-item\">Rocket Type: {rocket_type}</li>\n                                    </div>\n                                )\n                            }\n                        }\n                    }\n                </Query>\n                <hr/>\n                <Link to={`/`} className=\"btn btn-secondary\">Back</Link>\n            </Fragment>\n        );\n    }\n}\n\nexport default Launch;","import React, {Component} from 'react';\nimport ApolloClient from 'apollo-boost';\nimport {ApolloProvider} from 'react-apollo'\nimport {BrowserRouter as Router, Route} from 'react-router-dom';\nimport './App.css';\nimport logo from './SpaceX-logo.png'\nimport Launches from \"./compoments/Launches\";\nimport Launch from \"./compoments/Launch\";\n\nconst client = new ApolloClient({\n    uri: '/graphql'\n});\n\nclass App extends Component {\n    render() {\n        return (\n            <ApolloProvider client={client}>\n                <Router>\n                    <div className=\"container\">\n                        <img src={logo} alt=\"SpaceX\" style={{width: 300, display: 'block', margin: 'auto'}}/>\n                        <Route exact path=\"/\" component={Launches} />\n                        <Route exact path=\"/launch/:flight_number\" component={Launch} />\n                    </div>\n                </Router>\n            </ApolloProvider>\n        );\n    }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}